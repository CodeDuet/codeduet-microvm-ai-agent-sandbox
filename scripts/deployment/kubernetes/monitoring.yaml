apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: microvm-sandbox
  labels:
    app.kubernetes.io/name: microvm-sandbox
    app.kubernetes.io/component: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: standard

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: microvm-sandbox
  labels:
    app.kubernetes.io/name: microvm-sandbox
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/instance: prometheus
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: microvm-sandbox
      app.kubernetes.io/component: monitoring
      app.kubernetes.io/instance: prometheus
  template:
    metadata:
      labels:
        app.kubernetes.io/name: microvm-sandbox
        app.kubernetes.io/component: monitoring
        app.kubernetes.io/instance: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
        - name: prometheus
          image: prom/prometheus:latest
          ports:
            - name: prometheus
              containerPort: 9090
              protocol: TCP
          args:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--storage.tsdb.retention.time=30d'
            - '--web.enable-lifecycle'
            - '--web.enable-admin-api'
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus
              readOnly: true
            - name: prometheus-storage
              mountPath: /prometheus
            - name: prometheus-rules
              mountPath: /etc/prometheus/rules
              readOnly: true
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: prometheus
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /-/ready
              port: prometheus
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 4
            failureThreshold: 3
          resources:
            limits:
              cpu: "2"
              memory: "4Gi"
            requests:
              cpu: "500m"
              memory: "2Gi"
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config
        - name: prometheus-storage
          persistentVolumeClaim:
            claimName: prometheus-pvc
        - name: prometheus-rules
          configMap:
            name: prometheus-rules

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: microvm-sandbox
  labels:
    app.kubernetes.io/name: microvm-sandbox
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/instance: prometheus
spec:
  type: ClusterIP
  ports:
    - port: 9090
      targetPort: prometheus
      protocol: TCP
      name: prometheus
  selector:
    app.kubernetes.io/name: microvm-sandbox
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/instance: prometheus

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: microvm-sandbox
  labels:
    app.kubernetes.io/name: microvm-sandbox
    app.kubernetes.io/component: monitoring

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
  labels:
    app.kubernetes.io/name: microvm-sandbox
    app.kubernetes.io/component: monitoring
rules:
  - apiGroups: [""]
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
    verbs: ["get", "list", "watch"]
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs: ["get", "list", "watch"]
  - nonResourceURLs: ["/metrics"]
    verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
  labels:
    app.kubernetes.io/name: microvm-sandbox
    app.kubernetes.io/component: monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: microvm-sandbox

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: microvm-sandbox
  labels:
    app.kubernetes.io/name: microvm-sandbox
    app.kubernetes.io/component: monitoring
data:
  microvm.yaml: |
    groups:
      - name: microvm.rules
        rules:
          # API Response Time
          - alert: HighAPIResponseTime
            expr: histogram_quantile(0.95, rate(microvm_api_request_duration_seconds_bucket[5m])) > 1
            for: 2m
            labels:
              severity: warning
              component: api
            annotations:
              summary: "High API response time detected"
              description: "95th percentile API response time is {{ $value }}s"
          
          # VM Boot Time
          - alert: SlowVMBootTime
            expr: microvm_vm_boot_time_seconds > 10
            for: 1m
            labels:
              severity: warning
              component: vm
            annotations:
              summary: "Slow VM boot time detected"
              description: "VM {{ $labels.vm_name }} took {{ $value }}s to boot"
          
          # Resource Usage
          - alert: HighMemoryUsage
            expr: microvm_host_memory_usage_percent > 85
            for: 5m
            labels:
              severity: warning
              component: system
            annotations:
              summary: "High memory usage on host"
              description: "Host memory usage is {{ $value }}%"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: microvm-sandbox
  labels:
    app.kubernetes.io/name: microvm-sandbox
    app.kubernetes.io/component: visualization
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: microvm-sandbox
  labels:
    app.kubernetes.io/name: microvm-sandbox
    app.kubernetes.io/component: visualization
    app.kubernetes.io/instance: grafana
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: microvm-sandbox
      app.kubernetes.io/component: visualization
      app.kubernetes.io/instance: grafana
  template:
    metadata:
      labels:
        app.kubernetes.io/name: microvm-sandbox
        app.kubernetes.io/component: visualization
        app.kubernetes.io/instance: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:latest
          ports:
            - name: grafana
              containerPort: 3000
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: microvm-secrets
                  key: GF_SECURITY_ADMIN_PASSWORD
            - name: GF_USERS_ALLOW_SIGN_UP
              value: "false"
            - name: GF_INSTALL_PLUGINS
              value: "grafana-piechart-panel"
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
              readOnly: true
            - name: grafana-dashboards-config
              mountPath: /etc/grafana/provisioning/dashboards
              readOnly: true
          livenessProbe:
            httpGet:
              path: /api/health
              port: grafana
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/health
              port: grafana
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          resources:
            limits:
              cpu: "1"
              memory: "2Gi"
            requests:
              cpu: "100m"
              memory: "512Mi"
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-pvc
        - name: grafana-datasources
          configMap:
            name: grafana-datasources
        - name: grafana-dashboards-config
          configMap:
            name: grafana-dashboards-config

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: microvm-sandbox
  labels:
    app.kubernetes.io/name: microvm-sandbox
    app.kubernetes.io/component: visualization
    app.kubernetes.io/instance: grafana
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: grafana
      protocol: TCP
      name: grafana
  selector:
    app.kubernetes.io/name: microvm-sandbox
    app.kubernetes.io/component: visualization
    app.kubernetes.io/instance: grafana

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: microvm-sandbox
  labels:
    app.kubernetes.io/name: microvm-sandbox
    app.kubernetes.io/component: visualization
data:
  datasources.yml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:9090
        isDefault: true
        editable: true

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-config
  namespace: microvm-sandbox
  labels:
    app.kubernetes.io/name: microvm-sandbox
    app.kubernetes.io/component: visualization
data:
  dashboards.yml: |
    apiVersion: 1
    providers:
      - name: default
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        options:
          path: /var/lib/grafana/dashboards